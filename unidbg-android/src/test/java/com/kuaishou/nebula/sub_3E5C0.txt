__int64 __fastcall sub_3E5C0(__int64 a1, __int64 a2)
{
  __int64 v2; // x29
  __int64 v3; // x30
  char v6; // w0
  int v7; // w8
  int v8; // w8
  unsigned int v9; // w26
  int v10; // w9
  __int64 v11; // x21
  __int64 v12; // x0
  __int64 v13; // x21
  __int64 v14; // x0
  char v15; // w0
  int v16; // w9
  unsigned __int64 v17; // x8
  unsigned __int64 v18; // x8
  __int64 v19; // x20
  __int64 v20; // x21
  __int64 v21; // x0
  __int64 v22; // x0
  _QWORD *v23; // x0
  __int64 v24; // x0
  char *v25; // x20
  char *v26; // x21
  unsigned __int8 *v27; // x20
  unsigned __int8 *v28; // x21
  unsigned __int64 v29; // x8
  _BYTE *v30; // x23
  __int64 v31; // x24
  unsigned __int64 v32; // x23
  unsigned __int64 v33; // x24
  size_t v34; // x2
  char *v35; // x0
  const void *v36; // x1
  void *v37; // x24
  void *v38; // x23
  void *v39; // x25
  __int64 v40; // x0
  int v41; // w26
  _QWORD *v42; // x0
  __int64 v43; // x0
  const void **v44; // x20
  const void **v45; // x25
  unsigned __int64 v46; // x21
  char *v47; // x26
  unsigned __int64 v48; // x8
  const void **v49; // x23
  const void *v50; // x24
  size_t v51; // x2
  char *v52; // x1
  char *v53; // x20
  char *v54; // x21
  unsigned __int8 *v55; // x20
  unsigned __int8 *v56; // x21
  void *v57; // x26
  unsigned __int64 v58; // x8
  _BYTE *v59; // x25
  __int64 v60; // x23
  unsigned __int64 v61; // x23
  unsigned __int64 v62; // x25
  size_t v63; // x2
  char *v64; // x0
  const void *v65; // x1
  int v66; // w10
  int v67; // w8
  int v68; // w9
  void *v70; // [xsp+28h] [xbp-178h]
  void *v71; // [xsp+30h] [xbp-170h]
  int v72; // [xsp+30h] [xbp-170h]
  void *v73; // [xsp+38h] [xbp-168h]
  unsigned __int8 *v74; // [xsp+48h] [xbp-158h] BYREF
  unsigned __int8 *v75; // [xsp+50h] [xbp-150h]
  __int64 v76; // [xsp+58h] [xbp-148h]
  const void **v77; // [xsp+60h] [xbp-140h] BYREF
  const void **v78; // [xsp+68h] [xbp-138h]
  __int64 v79; // [xsp+70h] [xbp-130h]
  void *v80[2]; // [xsp+78h] [xbp-128h] BYREF
  void *v81; // [xsp+88h] [xbp-118h]
  void *v82[2]; // [xsp+90h] [xbp-110h] BYREF
  void *v83; // [xsp+A0h] [xbp-100h]
  __int64 v84; // [xsp+A8h] [xbp-F8h] BYREF
  unsigned __int64 v85; // [xsp+B0h] [xbp-F0h]
  void *v86; // [xsp+B8h] [xbp-E8h]
  __int64 v87; // [xsp+C0h] [xbp-E0h] BYREF
  unsigned __int64 v88; // [xsp+C8h] [xbp-D8h]
  void *v89; // [xsp+D0h] [xbp-D0h]
  char v90; // [xsp+D8h] [xbp-C8h] BYREF
  __int16 v91; // [xsp+D9h] [xbp-C7h]
  __int64 v92; // [xsp+DCh] [xbp-C4h]
  __int64 v93; // [xsp+E8h] [xbp-B8h]
  __int64 v94; // [xsp+F0h] [xbp-B0h]
  void *v95; // [xsp+F8h] [xbp-A8h]
  __int64 v96; // [xsp+108h] [xbp-98h]
  __int64 v97; // [xsp+110h] [xbp-90h]
  void *v98; // [xsp+118h] [xbp-88h]
  int v99; // [xsp+120h] [xbp-80h] BYREF
  __int16 v100; // [xsp+124h] [xbp-7Ch]
  __int16 v101; // [xsp+128h] [xbp-78h] BYREF
  char v102; // [xsp+12Ah] [xbp-76h]
  __int16 v103; // [xsp+12Ch] [xbp-74h] BYREF
  char v104; // [xsp+12Eh] [xbp-72h]
  __int64 v105; // [xsp+190h] [xbp-10h]
  __int64 v106; // [xsp+198h] [xbp-8h]

  v105 = v2;
  v106 = v3;
  _ReadStatusReg(TPIDR_EL0);
  if ( dword_70C10 >= 10 && (((dword_70C14 - 1) * dword_70C14) & 1) != 0 )
    goto LABEL_5;
  while ( 1 )
  {
    v6 = sub_3DDB0(a1);
    v7 = (dword_70C14 - 1) * dword_70C14;
    if ( dword_70C10 < 10 || (v7 & 1) == 0 )
      break;
LABEL_5:
    sub_3DDB0(a1);
  }
  if ( (v6 & 1) != 0 )
  {
    nullsub_5(133321);
    v8 = dword_70C10;
    v9 = 1;
    v10 = (((_BYTE)dword_70C14 - 1) * (_BYTE)dword_70C14) & 1;
    if ( dword_70C10 >= 10 && ((((_BYTE)dword_70C14 - 1) * (_BYTE)dword_70C14) & 1) != 0 )
    {
      v9 = 1;
      do
      {
        nullsub_5(133321);
        nullsub_5(133321);
        v8 = dword_70C10;
        v10 = (((_BYTE)dword_70C14 - 1) * (_BYTE)dword_70C14) & 1;
      }
      while ( dword_70C10 >= 10 && ((((_BYTE)dword_70C14 - 1) * (_BYTE)dword_70C14) & 1) != 0 );
    }
  }
  else
  {
    if ( (dword_70C10 & 0x80000000) == 0 && v7 < 0 )
      goto LABEL_17;
    while ( 1 )
    {
      v93 = 0;
      v94 = 0;
      v96 = 0;
      v97 = 0;
      v95 = 0;
      v98 = 0;
      v91 = 0;
      v92 = 0xFFFFFFFFLL;
      v11 = operator new(0x18u);
      v12 = sub_2B1C4(v11);
      sub_12FF4(v11, *(_QWORD *)(v12 + 24), &v90);
      sub_DDF8(&v87, v11, a1, a2);
      sub_EDA0(&v84, v11, a1, a2);
      nullsub_5(75555);
      if ( dword_70C10 < 0 || (((dword_70C14 - 1) * dword_70C14) & 0x80000000) == 0 )
        break;
LABEL_17:
      v93 = 0;
      v94 = 0;
      v96 = 0;
      v97 = 0;
      v95 = 0;
      v98 = 0;
      v91 = 0;
      v92 = 0xFFFFFFFFLL;
      v13 = operator new(0x18u);
      v14 = sub_2B1C4(v13);
      sub_12FF4(v13, *(_QWORD *)(v14 + 24), &v90);
      sub_DDF8(&v87, v13, a1, a2);
      sub_EDA0(&v84, v13, a1, a2);
      nullsub_5(75555);
    }
    (*(void (__fastcall **)(__int64))(*(_QWORD *)v11 + 8LL))(v11);
    if ( (dword_70C10 & 0x80000000) == 0 && (dword_70C14 - 1) * dword_70C14 < 0 )
    {
      while ( 1 )
        ;
    }
    while ( 1 )
    {
      v15 = (*(__int64 (__fastcall **)(__int64))(*(_QWORD *)a1 + 1824LL))(a1);
      v16 = (dword_70C14 - 1) * dword_70C14;
      if ( dword_70C10 < 0 || (v16 & 0x80000000) == 0 )
        break;
      (*(void (__fastcall **)(__int64))(*(_QWORD *)a1 + 1824LL))(a1);
    }
    if ( v15 == 1 )
      goto LABEL_134;
    while ( dword_70C10 >= 10 && (v16 & 1) != 0 )
      ;
    v17 = (v87 & 1) != 0 ? v88 : (unsigned __int64)(unsigned __int8)v87 >> 1;
    if ( v17 && ((v84 & 1) != 0 ? (v18 = v85) : (v18 = (unsigned __int64)(unsigned __int8)v84 >> 1), v18) )
    {
      while ( 1 )
      {
        v104 = 9;
        v103 = 32514;
        v101 = 32514;
        v100 = -912;
        v102 = 12;
        v99 = 839400965;
        v37 = (void *)sub_3C54C(&v103);
        v38 = (void *)sub_3C54C(&v101);
        v39 = (void *)sub_3C54C(&v99);
        v40 = sub_2B1C4(v39);
        v41 = 1;
        v42 = sub_2CCFC(v82, v40, 1, v37);
        v43 = sub_2B1C4(v42);
        sub_2CCFC(v80, v43, 1, v38);
        nullsub_5(431313);
        v78 = 0;
        v79 = 0;
        v77 = 0;
        sub_3CA8C(v82, 44, &v77);
        v44 = v78;
        v73 = v39;
        if ( v77 != v78 )
        {
          v45 = v77 + 2;
          v70 = v38;
          v71 = v37;
          if ( (v87 & 1) != 0 )
            v46 = v88;
          else
            v46 = (unsigned __int64)(unsigned __int8)v87 >> 1;
          if ( (v87 & 1) != 0 )
            v47 = (char *)v89;
          else
            v47 = (char *)&v87 + 1;
          while ( 1 )
          {
            v49 = v45 - 2;
            v48 = *((unsigned __int8 *)v45 - 16);
            v50 = (v48 & 1) != 0 ? *(v45 - 1) : (const void *)(v48 >> 1);
            v51 = (unsigned __int64)v50 >= v46 ? v46 : (size_t)v50;
            if ( !v51 || ((v48 & 1) != 0 ? (v52 = (char *)*v45) : (v52 = (char *)v45 - 15), !memcmp(v47, v52, v51)) )
            {
              if ( (const void *)v46 == v50 )
                break;
            }
            v45 += 3;
            if ( v49 + 3 == v44 )
            {
              v41 = 1;
              goto LABEL_90;
            }
          }
          v41 = 0;
LABEL_90:
          v38 = v70;
          v37 = v71;
          v39 = v73;
        }
        v75 = 0;
        v76 = 0;
        v74 = 0;
        if ( (v84 & 1) != 0 )
        {
          v54 = (char *)v86;
          v53 = (char *)v86 + v85;
        }
        else
        {
          v53 = (char *)&v84 + ((unsigned __int64)(unsigned __int8)v84 >> 1) + 1;
          v54 = (char *)&v84 + 1;
        }
        for ( ; v53 != v54; ++v54 )
          *v54 = tolower((unsigned __int8)*v54);
        sub_3CA8C(v80, 44, &v74);
        v55 = v74;
        v56 = v75;
        if ( v74 == v75 )
        {
          v66 = 1;
        }
        else
        {
          v72 = v41;
          v57 = v38;
          while ( 1 )
          {
            v58 = *v55;
            if ( (v58 & 1) != 0 )
            {
              v59 = (_BYTE *)*((_QWORD *)v55 + 2);
              v60 = (__int64)&v59[*((_QWORD *)v55 + 1)];
            }
            else
            {
              v59 = v55 + 1;
              v60 = (__int64)&v55[(v58 >> 1) + 1];
            }
            if ( v59 != (_BYTE *)v60 )
            {
              do
              {
                *v59 = tolower((unsigned __int8)*v59);
                ++v59;
              }
              while ( (_BYTE *)v60 != v59 );
              LODWORD(v58) = *v55;
            }
            v61 = (v58 & 1) != 0 ? *((_QWORD *)v55 + 1) : (unsigned int)v58 >> 1;
            v62 = (v84 & 1) != 0 ? v85 : (unsigned __int64)(unsigned __int8)v84 >> 1;
            v63 = v61 >= v62 ? v62 : v61;
            if ( !v63
              || ((v84 & 1) != 0 ? (v64 = (char *)v86) : (v64 = (char *)&v84 + 1),
                  (v58 & 1) == 0 ? (v65 = v55 + 1) : (v65 = (const void *)*((_QWORD *)v55 + 2)),
                  !memcmp(v64, v65, v63)) )
            {
              if ( v62 == v61 )
                break;
            }
            v55 += 24;
            if ( v55 == v56 )
            {
              v66 = 1;
              goto LABEL_126;
            }
          }
          v66 = 0;
LABEL_126:
          v38 = v57;
          v39 = v73;
          v41 = v72;
        }
        v67 = dword_70C10;
        v68 = (dword_70C14 - 1) * dword_70C14;
        if ( dword_70C10 < 10 || (v68 & 1) == 0 )
          break;
        v104 = 9;
        v103 = 32514;
        v101 = 32514;
        v100 = -912;
        v102 = 12;
        v99 = 839400965;
        v19 = sub_3C54C(&v103);
        v20 = sub_3C54C(&v101);
        v21 = sub_3C54C(&v99);
        v22 = sub_2B1C4(v21);
        v23 = sub_2CCFC(v82, v22, 1, v19);
        v24 = sub_2B1C4(v23);
        sub_2CCFC(v80, v24, 1, v20);
        nullsub_5(431313);
        v78 = 0;
        v79 = 0;
        v77 = 0;
        sub_3CA8C(v82, 44, &v77);
        v75 = 0;
        v76 = 0;
        v74 = 0;
        if ( (v84 & 1) != 0 )
        {
          v26 = (char *)v86;
          v25 = (char *)v86 + v85;
        }
        else
        {
          v25 = (char *)&v84 + ((unsigned __int64)(unsigned __int8)v84 >> 1) + 1;
          v26 = (char *)&v84 + 1;
        }
        for ( ; v25 != v26; ++v26 )
          *v26 = tolower((unsigned __int8)*v26);
        sub_3CA8C(v80, 44, &v74);
        v28 = v74;
        v27 = v75;
        while ( v28 != v27 )
        {
          v29 = *v28;
          if ( (v29 & 1) != 0 )
          {
            v30 = (_BYTE *)*((_QWORD *)v28 + 2);
            v31 = (__int64)&v30[*((_QWORD *)v28 + 1)];
          }
          else
          {
            v30 = v28 + 1;
            v31 = (__int64)&v28[(v29 >> 1) + 1];
          }
          if ( v30 != (_BYTE *)v31 )
          {
            do
            {
              *v30 = tolower((unsigned __int8)*v30);
              ++v30;
            }
            while ( (_BYTE *)v31 != v30 );
            LODWORD(v29) = *v28;
          }
          v32 = (v29 & 1) != 0 ? *((_QWORD *)v28 + 1) : (unsigned int)v29 >> 1;
          v33 = (v84 & 1) != 0 ? v85 : (unsigned __int64)(unsigned __int8)v84 >> 1;
          v34 = v32 >= v33 ? v33 : v32;
          if ( !v34
            || ((v84 & 1) != 0 ? (v35 = (char *)v86) : (v35 = (char *)&v84 + 1),
                (v29 & 1) == 0 ? (v36 = v28 + 1) : (v36 = (const void *)*((_QWORD *)v28 + 2)),
                !memcmp(v35, v36, v34)) )
          {
            if ( v33 == v32 )
              break;
          }
          v28 += 24;
        }
      }
      if ( (v41 | v66) == 1 )
      {
        sub_3B350(a1, 70016, "70016");
        v67 = dword_70C10;
        v9 = 0;
        v68 = (dword_70C14 - 1) * dword_70C14;
        for ( qword_70910 |= 0x8000000000000uLL; (dword_70C10 & 0x80000000) == 0; v68 = (dword_70C14 - 1) * dword_70C14 )
        {
          if ( (v68 & 0x80000000) == 0 )
            break;
          sub_3B350(a1, 70016, "70016");
          qword_70910 |= 0x8000000000000uLL;
          sub_3B350(a1, 70016, "70016");
          v67 = dword_70C10;
          v9 = 0;
          qword_70910 |= 0x8000000000000uLL;
        }
      }
      else
      {
        v9 = 1;
        qword_70910 &= ~0x8000000000000uLL;
      }
      if ( v68 < 0 && (v67 & 0x80000000) == 0 )
        goto LABEL_176;
      while ( 1 )
      {
        nullsub_5(113246);
        sub_DCE8(&v74);
        sub_DCE8(&v77);
        if ( ((__int64)v80[0] & 1) != 0 )
          operator delete(v81);
        if ( ((__int64)v82[0] & 1) != 0 )
          operator delete(v83);
        if ( v39 )
          sub_3C614(v39);
        if ( v38 )
          sub_3C614(v38);
        if ( v37 )
          sub_3C614(v37);
        if ( dword_70C10 < 0 || (((dword_70C14 - 1) * dword_70C14) & 0x80000000) == 0 )
          break;
        v37 = 0;
        v38 = 0;
        v39 = 0;
LABEL_176:
        nullsub_5(113246);
        sub_DCE8(&v74);
        sub_DCE8(&v77);
        if ( ((__int64)v80[0] & 1) != 0 )
          operator delete(v81);
        if ( ((__int64)v82[0] & 1) != 0 )
          operator delete(v83);
        if ( v39 )
          sub_3C614(v39);
        if ( v38 )
          sub_3C614(v38);
        if ( v37 )
          sub_3C614(v37);
        v37 = 0;
        v38 = 0;
        v39 = 0;
      }
    }
    else
    {
LABEL_134:
      while ( 1 )
      {
        (*(void (__fastcall **)(__int64))(*(_QWORD *)a1 + 136LL))(a1);
        sub_3B350(a1, 70015, "70015");
        nullsub_5(112323);
        v9 = 0;
        if ( dword_70C10 < 0 || (((dword_70C14 - 1) * dword_70C14) & 0x80000000) == 0 )
          break;
        (*(void (__fastcall **)(__int64))(*(_QWORD *)a1 + 136LL))(a1);
        sub_3B350(a1, 70015, "70015");
        nullsub_5(112323);
      }
    }
    while ( 1 )
    {
      qword_70910 |= 0x1000000000000uLL;
      if ( (v84 & 1) != 0 )
        operator delete(v86);
      if ( (v87 & 1) != 0 )
        operator delete(v89);
      if ( (v96 & 1) != 0 )
        operator delete(v98);
      if ( (v93 & 1) != 0 )
        operator delete(v95);
      v8 = dword_70C10;
      v10 = (((_BYTE)dword_70C14 - 1) * (_BYTE)dword_70C14) & 1;
      if ( dword_70C10 < 10 || ((((_BYTE)dword_70C14 - 1) * (_BYTE)dword_70C14) & 1) == 0 )
        break;
      qword_70910 |= 0x1000000000000uLL;
      if ( (v84 & 1) != 0 )
        operator delete(v86);
      if ( (v87 & 1) != 0 )
        operator delete(v89);
      if ( (v96 & 1) != 0 )
        operator delete(v98);
      if ( (v93 & 1) != 0 )
        operator delete(v95);
    }
  }
  if ( v10 && v8 >= 10 )
  {
    while ( 1 )
      ;
  }
  return v9;
}